* [done] CSGBoolean returning wrong number of CCs 
* [done] Fix intersection point computation bug ofr x.obj and y.obj inputs
* [done] Add proper timer and macros into utils.h
* [done] fix bug in test "DispatchFilterFlags.partialCutWithInsideSealing"
    - wrong number of output CC's only happen
    - include unsealed CC, which should not be included
    - only happens in multi-threaded build
* [done] fix valgrind multi-threading bug
* [done] Fix valgrind memory leaks on tests and tutorials
* [done] remove warnings from shewchuck.c
* [done] parallelise indexArrayMeshToHalfedgeMesh
* [done] Optimize "store ... connected components"
* [done ] Implement work-stealing on queues
* [done] Test all configurations 
    - MCUT_BUILD_WITH_ARBITRARY_PRECISION_NUMBERS
    - MCUT_BUILD_AS_SHARED_LIB
    - MCUT_BUILD_AS_MULTI_THREADED_LIB
    - MCUT_BUILD_TUTORIALS
* [done] Test with clang too
* [done] remove warnings
* [done] Test on windows
* [done] Design teaser image for Github
* [done] Design teaser image for website
* [done] Update website descritions
* [done] Update documentation in mcut.h
* [done] setup github workflows
---------------------------------------------------
* Remove code to do with MPFR (WARNING BREAKING CHANGE) [done]
* Remove DEBUG_CODE_MASK [done]
* Pass through code to read and improve documentation (for user and internal) [done]
    - be sure to update the documentation of "mcDispatch" each time you think of a new source of error
* Constrained delauney triangulation  [done]
    - Allow creating hmesh_t with 2d vertices
    - clean up current code [done]
    - test it (use also Valgrind) [done]
* Remove "array_mesh_t" and simply populate client arrays when needed during "mcGetConnectedComponentData" [done]
    - This could shave a good amount of time off mcDispatch (logic would be pushed into "mcGetConnectedComponentData")
* Replace .at() calls with [] operator [done]
* Allow passing null for faceSize and numFaces parameters to permit easy treatment on triangulated input meshes [done]
---------------------------------------------------

* Implement lock-free thread-pool 
* Make whole API thread-safe using a thread-safe context map data structure such that only one user thread may access/modify the MCUT state at any one time
    - test it!

* Add python bindings
* Add Go bindings
* Add C# bindings

* Implement conforming triangulation
    - Will require adding a new hmesh_t instance per CC, which holds triangulated faces. The vertex list will be same as kernel output but added with steiner points. 
    - Can be made parallel using graph coloring

* add check for non-manifold edges during input mesh construction
    - test it using sphere mesh from wayne

* Fix bug from Brad (benchmark 063.off)

* Make "mcGetConnectedComponentData" parallel
    - test it

* Implement and test debug callback functionality
* Add functionality to work with inputs tht have a mixed winding order (single CC like wayne asked for)
* Add functionality to unperturb vertices numerical perturbation code
    - cut-mesh CCs: original vertices are moved but intersection are fixed
    - src-mesh CCs: original vertices are fixed but intersection are moved
    - test it!
* Add functionality so that program fails if any input mesh has a zero-area _intersecting_ face
* Rename tutorials directory to "examples"
* Replace libigl with small "mutil" library
* Implement proper delauney triangulation which works with non-simple polygons from partial cuts (i.e. for MC_CONNECTED_COMPONENT_DATA_FACE_TRIANGULATION)
    - test it!

* Implement Mael's mesh repair library as a separate tool to ensure manifoldness of MCUT inputs.

* Add additional control for setting number of threads per context via McContextCreationFlags
    - test it!
* Test with valgrind
* Add tutorial of a multiple threaded client application, where each thread creates its own mcut context.
* Write tutorial on dispath filtering
* Write tutorial about partial cuts using ARAP deformation
* Add and write tutorial about querying seam vertices
* Add release mode assertions, with user messages
* Add debug mode assertions
* Add test to check that input mesh has simple polygons
* parallelise Oi-BVH contruction
* parallelise Oi-BVH traversal
* Optimize "Create polygon-exterior edges"
* Optimize "Build patch graphs"
* Optimize "Create reversed patches"
* parallelise "Save patches"
* Optimize "Stitching"
* parallelise BVH construction (NOT NEEDED, TOO SLOW ANYWAY)
* Add performance comparison against: LibIGL, CGAL, Cork and Carve
    - See this: https://github.com/PyMesh/PyMesh/tree/main/tools/Boolean
* Add ability to build with 'make'
    - test it
* Add basic explanation file for building without 'CMake' or 'make'


